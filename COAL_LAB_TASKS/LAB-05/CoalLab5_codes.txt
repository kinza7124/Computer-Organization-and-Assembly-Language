LAB5 Q1
INCLUDE Irvine32.inc
.data
val1 DWORD 8000
.code
main PROC
mov eax, val1
add eax, 1
call DumpRegs
exit
main ENDP
END main

LAB5 Q2
INCLUDE Irvine32.inc
.code
main PROC
mov ax, 7FF0h
add al,10h
add ah, 1
add ax, 2
call DumpRegs
exit
main ENDP
END main

LAB5Q3
INCLUDE Irvine32.inc
.data
arr BYTE 61,43,11,52,25
arr2 BYTE 5 DUP(?)
.code
main PROC
mov al, [arr+2]
mov [arr2+0], al
mov al, [arr+4]
mov [arr2+1], al
mov al, [arr+1]
mov [arr2+2], al
mov al, [arr+3]
mov [arr2+3], al
mov al, [arr+0]
mov [arr2+4], al
call DumpRegs
exit
main ENDP
END main

LAB5Q4
INCLUDE Irvine32.inc
.data
arrayB BYTE 10,20,30
arrayW WORD 150,250,350
arrayD DWORD 600,1200,1800
SUM1 DWORD ?
SUM2 DWORD ?
SUM3 DWORD ?
.code
main PROC
movzx ebx, [arrayB+0]
movzx eax, [arrayW+0]
add eax, ebx
mov ebx, [arrayD+0]
add eax, ebx
mov SUM1, eax

mov eax, 0
mov ebx, 0
movzx ebx, [arrayB+1]
movzx eax, [arrayW+2]
add eax, ebx
mov ebx, [arrayD+4]
add eax, ebx
mov SUM2, eax
mov eax, 0
mov ebx, 0
movzx ebx, [arrayB+2]
movzx eax, [arrayW+4]
add eax, ebx
mov ebx, [arrayD+8]
add eax, ebx
mov SUM3, eax
call DumpRegs
call WriteDec
exit
main ENDP
END main
sum1:000002F8h
sum2:000005BEh
sum3:00000884h

LAB5Q5
INCLUDE Irvine32.inc
.data
array1 BYTE 10,20,30,40
array2 BYTE 4 DUP(?)
.code
main PROC
mov eax, 0
mov esi, OFFSET array1+3
mov edi, OFFSET array2
mov al, [esi]
mov [edi], al
dec esi
inc edi
mov al, [esi]
mov [edi], al
dec esi
inc edi
mov al, [esi]
mov [edi], al
dec esi
inc edi
mov al, [esi]
mov [edi], al
; to print elements of array 2 to check
mov esi, OFFSET array2     
mov ecx, 4       
print_loop:
    mov al, [esi]              
    call WriteDec              
    call Crlf                 
    inc esi                    
    loop print_loop           
call DumpRegs
exit
main ENDP
END main

WORD size:
INCLUDE Irvine32.inc
.data
arr WORD 61,43,11,52,25
arr2 WORD 5 DUP(?)
.code
main PROC
 mov ax, [arr + 4]    
mov [arr2 + 0], ax   
mov ax, [arr + 8]     
mov [arr2 + 2], ax 
mov ax, [arr + 2]   
mov [arr2 + 4], ax    
mov ax, [arr + 6]     
mov [arr2 + 6], ax    
mov ax, [arr + 0]  
mov [arr2 + 8], ax    
call DumpRegs
exit
main ENDP
END main

DWORD size:
INCLUDE Irvine32.inc
.data
arr WORD 61,43,11,52,25
arr2 WORD 5 DUP(?)
.code
main PROC
mov eax, [arr + 8]            
mov [arr2 + 0], eax          
mov eax, [arr + 16]           
mov [arr2 + 4], eax          
mov eax, [arr + 12]           
mov [arr2 + 8], eax          
mov eax, [arr + 20]          
mov [arr2 + 12], eax          
mov eax, [arr + 0]            
mov [arr2 + 16], eax      
call DumpRegs
exit
main ENDP
END main

LAB5Q6
INCLUDE Irvine32.inc
.data
array DWORD 10h,20h,30h,40h,50h
.code
main PROC
mov esi, OFFSET array
mov eax, [esi]
add esi, 4
mov ebx, [esi]
sub eax, ebx
add esi, 4
mov ebx, [esi]
sub eax, ebx
add esi, 4
mov ebx, [esi]
sub eax, ebx
add esi, 4
mov ebx, [esi]
sub eax, ebx
call DumpRegs
exit
main ENDP
END main

LAB5Q7
INCLUDE Irvine32.inc
.data
arrayB BYTE 60,70,80
arrayW WORD 150,250,350
arrayD DWORD 600,1200,1800
.code
main PROC
 mov esi, OFFSET arrayB         
    mov al, [esi]                  
    mov bl, [esi + 2*TYPE arrayB]  
    add al, bl                     
    movzx eax, al                  
    call WriteDec                   
    call Crlf                      

    mov esi, OFFSET arrayW        
    mov ax, [esi]                  
    mov bx, [esi + 2*TYPE arrayW]  
    add ax, bx                     
    movzx eax, ax                  
    call WriteDec                  
    call Crlf                      


    mov esi, OFFSET arrayD      
    mov eax, [esi]                 
    mov ebx, [esi + 2*TYPE arrayD] 
    add eax, ebx                   
    call WriteDec                  
    call Crlf                      


call DumpRegs
exit
main ENDP
END main
